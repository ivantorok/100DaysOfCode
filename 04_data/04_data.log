http://eloquentjavascript.net/04_data.html
2018-01-25 19:17:09
Data Structures: Objects and Arrays
The weresquirrel
   Data sets
      JavaScript provides a data type specifically for storing sequences of values. It is called an array and is written as a list of values between square brackets, separated by commas.
   Properties
      myString.length ir Math.max
      Both value.x and value[x] access a property on value—but not necessarily the same property. The difference is in how x is interpreted. When using a dot, the part after the dot must be a valid variable name, and it directly names the property. When using square brackets, the expression between the brackets is evaluated to get the property name. Whereas value.x fetches the property of value named “x”, value[x] tries to evaluate the expression x and uses the result as the property name.
   Methods
      Properties that contain functions are generally called methods of the value they belong to. As in, “toUpperCase is a method of a string”.
      array.pop
      array.push
      array.join
   Objects
      Values of the type object are arbitrary collections of properties between {} and elements are devided by "," the elements consists of name and value with ":" in between them.
   Mutability
      object1 == object2 is true only if those are accessing the same value precisely, not if both of them accesses the same amount of value but different instances.
   The lycanthrope’s log
      google it
   Computing correlation
2018-01-25 20:13:05 This one is getting messy for me around:

function hasEvent(event, entry) {
  return entry.events.indexOf(event) != -1;
}


what does the events mean in line:
  return entry.events.indexOf(event) != -1;

Is this a property, a method, a what?
2018-01-25 20:15:35  ah okay, this is just one of the elements of the objet (is this the right term / phrase "element of an object" ?)

2018-01-26 21:35:45
function hasEven(event, entry) {
   return entry.events.indexOf(event) != -1;
}

This function checks if an event has a certain entry, and if it has it, it will return it's position among the events.
the entry.events is the reference made up by the entry object and its events element. The events element is an array of event items. so entry.events.[0] is the first of the array items of the elements within the entry object.

Let's see the other one...

function tableFor(event, journal) {
   var table = [0, 0, 0, 0];
   for (var i = 0; i < jooournal.length; i++) {
      var entry = journal[i], index = 0;
      if (hasEvent(event, entry)) index +=1;
      if (entry.squirrel) index += 2;
      table[index] += 1;
   }
   return table;
}


so the same with comments:

function tableFor(event, journal) { //this is a function which is taking two variables, event and journal
  var table = [0, 0, 0, 0]; //we are defining a table array (which we are going to return at the end.
// this table is special
// the first position is going to hold the number of entries where we have not seen the event and we have not seen turning into a squirrel
// the second position is going to hold the number of entries where we have seen the event, but we have not seen turning into a squirrel
// the third position is going to hold the number of entries where we have not seen the eevent, but we have seen turning into a squirrel
// and finally the last one is going to hold the number of entries where we have seen both the event and turing into a squirrel.
  for (var i = 0; i < journal.length; i++) { //this is a for loop assisting going through the entire journal. If the entry does not have the event nor the squirrel, it will leave the position at 0, and we are going to increase the value of the table array which is in the postion 0 (the first position).
    var entry = journal[i], index = 0; //in every cycle we are going to use a new (new for the cycle) entry variable to point to the "i"-th entry of the journal. Oh and we set up the index variable with value 0. This is going to help us decide the  position of the value within the table array to increase 
    if (hasEvent(event, entry)) index += 1; //if this entry has the event, then we want to increment the value in the position 1 or 3 (second  or fourth), it depends on the next "if" condition 
    if (entry.squirrel) index += 2; //if this entry says we turned into a squirrel that day, then we want to increase the value in position 2 or 3 (third or fourth). it depends on the previous  "if" condition. 
    table[index] += 1;//Now, if we did not have the event nor the squirrel, we are increasing the number at postion 0, if we had the event, but not the squirrel, then at position 1, if we had the squirrel but not the event, then position 2, and if we had both the event and the squirrel, then position 3.
  }// This is going to be executed for all journal entries.
  return table; // once we finished, we return the table.
}


   Objects as maps

var map = {};
function storePhi(event, phi) {
   map[event] = phi;
}

and one more time with comments

var map = {}; //we are defining an object which we are going to call "map". This object is empty at this point.
function storePhi(event, phi) { //we are defining a cunftion called "storePhi" where we take two values: an event and it's correlation to squirrels (phi)
  map[event] = phi; //I had to stare at this for a long time, but I believe this is simply creating a new item in the object. Tha name of the item will be the name passed by the "event" variable, and the value of the item is going to be the value passed by the "phi" variable.
} // aaaaand that's it.

I think I can even test this in the console... so why not?

==>

var map = {};
undefined
function storePhi(event, phi) {
    map[event] = phi;
}
undefined
map
{}__proto__: Object
storePhi("pizza", 0.069);
undefined
map
{pizza: 0.069}pizza: 0.069__proto__: Object
storePhi("touched tree", -0.081);
undefined
map
{pizza: 0.069, touched tree: -0.081}pizza: 0.069touched tree: -0.081__proto__: Object
console.log("pizza" in map);
VM487:1 true
undefined
console.log(map["touched tree"]);
VM529:1 -0.081
undefined

<==

This looks cool :))))


I think I do not understand the real message here:
"A map is a way to go from values in one domain (in this case, event names) to corresponding values in another domain (in this case, ϕ coefficients)."

"JavaScript provides a loop construct specifically for going over the properties of an object. It looks a little like a normal for loop but distinguishes itself by the use of the word in."

==>
for (var event in map)
    console.log("The correlation for '" + event + "' is " + map[event]);
VM607:2 The correlation for 'pizza' is 0.069
VM607:2 The correlation for 'touched tree' is -0.081
undefined
<==

Pure awesomeness :)))

   The final analysis

function gatherCorrelations(journal) {
   var phis = {};
   for (var entry = 0; entry < journal.length; entry++) {
      var events = journal[entry].events;
      for (var i = 0; i < events.length; i++) {
         var event = events[i];
         if (!(event in phis))
            phis[event] = phi(tableFor(event, journal));
      }
   }
   return phis;
}




and one more time with comments:


function gatherCorrelations(journal) { // defining a function called gatherCorrelations. this funcrion takes a value under the journal name (I believe it specifically works with objects that have "evets" properties, which are objects, and squirrel properties which are boolean
  var phis = {}; //defining the phis object (empty) which we are going to return at the end.
  for (var entry = 0; entry < journal.length; entry++) { //looping through each and every entry of the journal object
    var events = journal[entry].events; // creating the local variable events and giving it the "entry"-th entry of the journal object
    for (var i = 0; i < events.length; i++) { // since it is an array we creat a loop to go over each array element in this entry
      var event = events[i]; // and we create a local "event" variable and ask it to hold the i-th item of  the events array
      if (!(event in phis)) // it this event is not yet in the phis object, then we proceed with:
        phis[event] = phi(tableFor(event, journal)); // creating a new entry in the phis object. We are going to call it by the name passed through the event variable and give the value which is returned (calculated) by the function defined earlier (so it will be a four items long array) 
    }//and that is it about the certain event within the journal entry. Once we looped through all events in the entry, we move on
  }// and that is it about the certain entry within the journal. Once we looped through all the entries within the journal object, we move on.
  return phis; //we return the entire phis object, which now has all the events with their table of numbers representing their correlation to squirrels. Beautiful ...
}

I gotta stop now, but I think it made more sense now, that I have a fixed goal with a timeline and real rewards / consequencies attached to it. (This is not the first time I try to read this book)

So long for today.

2018-01-26 22:33:08
2018-01-27 21:00:34
Okay, this is an other interesting piece of code:

for (var i = 0; i < JOURNAL.length; i++) {
   var entry = JOURNAL[i];
   if (hasEvent("peanuts", entry) && !hasEvent("brushed teeth", entry))
      entry.events.push("peanut teeth");
}


// and one more time with comments:

for (var i = 0; i < JOURNAL.length; i++) { //looping through all the JOURNAL properties.
  var entry = JOURNAL[i]; // loading one of the events into the entry variable
  if (hasEvent("peanuts", entry) && //if the entry has peanuts AND
     !hasEvent("brushed teeth", entry)) // does not have brushed teeth
    entry.events.push("peanut teeth"); //then a new "peanut teeth" item is added to the events array.
}
console.log(phi(tableFor("peanut teeth", JOURNAL)));
// → 1

   Further arrayology

push, pop
unshift, shift
indexOf, lastIndexOf
slice
concat

   Strings and their properties

length
toUpperCase
slice
indexOf
trim
charAt

   The arguments object
   The Math object
cos, sin, tan, acos, asin, atan, Math.PI
random, floor, ceil
   The global object
The global scope, the space in which global variables live, can also be approached as an object in JavaScript. Each global variable is present as a property of this object. In browsers, the global scope object is stored in the window variable.

var myVar = 10;
console.log("myVar" in window);
// → true
console.log(window.myVar);
// → 10

   Summary
Objects and arrays (which are a specific kind of object) provide ways to group several values into a single value. Conceptually, this allows us to put a bunch of related things in a bag and run around with the bag, instead of trying to wrap our arms around all of the individual things and trying to hold on to them separately.

Most values in JavaScript have properties, the exceptions being null and undefined. Properties are accessed using value.propName or value["propName"]. Objects tend to use names for their properties and store more or less a fixed set of them. Arrays, on the other hand, usually contain varying numbers of conceptually identical values and use numbers (starting from 0) as the names of their properties.

There are some named properties in arrays, such as length and a number of methods. Methods are functions that live in properties and (usually) act on the value they are a property of.

Objects can also serve as maps, associating values with names. The in operator can be used to find out whether an object contains a property with a given name. The same keyword can also be used in a for loop (for (var name in object)) to loop over an object’s properties.

   Exercises


The sum of a range
The introduction of this book alluded to the following as a nice way to compute the sum of a range of numbers:

console.log(sum(range(1, 10)));
Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.

//my solution

function range(start, end) {
    var rangeArray = [];
    for (i = start; i <= end; i++)
        rangeArray.push(i);
    return rangeArray;
}
undefined
console.log(range(1,10));
VM139:1 (10) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
undefined




Next, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the previous program and see whether it does indeed return 55.

//my solution:
function sum(array) {
    var sumOfArray = 0;
	for (i = 0 ; i < array.length ; i++) {
        sumOfArray += array[i];
    }
    return sumOfArray;
}
undefined
console.log(sum(range(1, 10)));
VM292:1 55
undefined



As a bonus assignment, modify your range function to take an optional third argument that indicates the “step” value used to build up the array. If no step is given, the array elements go up by increments of one, corresponding to the old behavior. The function call range(1, 10, 2) should return [1, 3, 5, 7, 9]. Make sure it also works with negative step values so that range(5, 2, -1) produces [5, 4, 3, 2].

//my solution

function range(start, end, step) {
	var stepVariable = 1;
	if (arguments.length == 3)
		stepVariable = step;
    var rangeArray = [];
    if (stepVariable > 0) {
    	for (i = start; i <= end; i += stepVariable)
        rangeArray.push(i);
    } else {
    	for (i = start; i >= end; i += stepVariable)
        rangeArray.push(i);
    }
    return rangeArray;
}
undefined
console.log(range(1,10));
VM508:1 (10) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
undefined
console.log(range(1,10,2));
VM510:1 (5) [1, 3, 5, 7, 9]
undefined
console.log(range(5,2,-1));
VM512:1 (4) [5, 4, 3, 2]
undefined
console.log(sum(range(1, 10)));
VM543:1 55
undefined

   Reversing an array
2018-01-27 22:11:23 I need to stop here for the day. It was good. I am not sure what I learned. Maybe this: = is passing value == is comparing values.

2018-01-30 18:20:38
   Reversing an array
Arrays have a method reverse, which changes the array by inverting the order in which its elements appear. For this exercise, write two functions, reverseArray and reverseArrayInPlace. The first, reverseArray, takes an array as argument and produces a new array that has the same elements in the inverse order. The second, reverseArrayInPlace, does what the reverse method does: it modifies the array given as argument in order to reverse its elements. Neither may use the standard reverse method.

// my code:

function reverseArray(array) {
    var resultArray = [];
    for (i = 0 ;i < array.length; i++) {
        resultArray[i] = array[array.length - 1 - i];
    }
    return resultArray;
}
undefined
console.log(reverseArray(["A", "B", "C"]))
VM638:1 (3) ["C", "B", "A"]0: "C"1: "B"2: "A"length: 3__proto__: Array(0)
undefined

function reverseArray(array) {
    var resultArray = [];
    for (i = 0 ;i < array.length; i++) {
        resultArray[i] = array[array.length - 1 - i];
    }
    return resultArray;
}
undefined
console.log(reverseArray(["A", "B", "C"]))
VM638:1 (3) ["C", "B", "A"]0: "C"1: "B"2: "A"length: 3__proto__: Array(0)
undefined

// the other solutions mentioned in the hints

function reverseArrayUnshift(array) {
    var tempArray = [];
    for (i = 0 ; i < array.length; i++) {
        tempArray.unshift(array[i]);
    }
    return tempArray;
}
undefined
console.log(reverseArrayUnshift(["A", "B", "C", "D", "E"]));
VM1076:1 (5) ["E", "D", "C", "B", "A"]0: "E"1: "D"2: "C"3: "B"4: "A"length: 5__proto__: Array(0)
undefined

// i am not gonna do the push version though...

//trying the in place with swap instead

function reverseArrayInPlaceSwap(array) {
    var tempValue;
    for (i = 0; i < Math.floor(array.length / 2); i++){
        tempValue = array[array.length - 1 - i];
        array[array.length - 1 - i] = array[i];
        array[i] = tempValue;
    }
}
undefined
arrayValue
(5) [5, 4, 3, 2, 1]
0
:
1
1
:
2
2
:
3
3
:
4
4
:
5
length
:
5
__proto__
:
Array(0)
reverseArrayInPlaceSwap(arrayValue);
undefined
arrayValue
(5) [1, 2, 3, 4, 5]
0
:
1
1
:
2
2
:
3
3
:
4
4
:
5
length
:
5
__proto__
:
Array(0)
arrayValue.push(6);
6
arrayValue
(6) [1, 2, 3, 4, 5, 6]
0
:
6
1
:
5
2
:
4
3
:
3
4
:
2
5
:
1
length
:
6
__proto__
:
Array(0)
reverseArrayInPlaceSwap(arrayValue);
undefined
arrayValue
(6) [6, 5, 4, 3, 2, 1]
0
:
6
1
:
5
2
:
4
3
:
3
4
:
2
5
:
1
length
:
6
__proto__
:
Array(0)

// this one I like a lot....

   A list

Objects, as generic blobs of values, can be used to build all sorts of data structures. A common data structure is the list (not to be confused with the array). A list is a nested set of objects, with the first object holding a reference to the second, the second to the third, and so on.


// my code here

function arrayToList(arrayInput) {
	if (arrayInput.length == 0)
        return null;
    return { value: arrayInput.shift(), rest: arrayToList(arrayInput)};
}
undefined
console.log(arrayToList([10, 20]));
VM1819:1 
{value: 10, rest: {…}}
rest
:
{value: 20, rest: null}
value
:
10
__proto__
:
Object


// my code here:

function listToArray(listInput) {
    var tempArray = [];
	//console.log("This is the tempArray at the beginning: " + tempArray);
    function drillDownInList(listInput) {
		//console.log(listInput);
        tempArray.push(listInput.value);
		//console.log("This is the tempArray somewhere in the middle: " + tempArray);
        if (listInput.rest == null) {
			return;
        } else {
			drillDownInList(listInput.rest);
        }
    }
    drillDownInList(listInput);
	//console.log("This is the tempArray at the end: " + tempArray);
    return tempArray;
}
undefined
console.log(listToArray(arrayToList([10,20,30])));
VM3529:1 (3) [10, 20, 30]0: 101: 202: 30length: 3__proto__: Array(0)
undefined

// I already had to use console.log to debug the code. Without that I was completely lost. “If your sword's too short, add to its length by taking one step forward.”

// my code here
function nth(listInput, position) {
    if (position == 0)
        return listInput.value
    else
        return nth(listInput.rest,position - 1);
}
undefined
console.log(nth(arrayToList([10,20,30]), 1));
VM4327:1 20
undefined

// that was easier eventually

looking at the hints. I think my solution is more elegant for the first task (or I misunderstood the hint).
Now this next one amuzes me:

To run over a list (in listToArray and nth), a for loop specification like this can be used:

for (var node = list; node; node = node.rest) {}

Can you see how that works? Every iteration of the loop, node points to the current sublist, and the body can read its value property to get the current element. At the end of an iteration, node moves to the next sublist. When that is null, we have reached the end of the list and the loop is finished.


okay... Deep comparison is coming up next, but I have to stop here for today.
2018-01-30 19:46:33
