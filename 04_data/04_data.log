http://eloquentjavascript.net/04_data.html
2018-01-25 19:17:09
Data Structures: Objects and Arrays
The weresquirrel
   Data sets
      JavaScript provides a data type specifically for storing sequences of values. It is called an array and is written as a list of values between square brackets, separated by commas.
   Properties
      myString.length ir Math.max
      Both value.x and value[x] access a property on value—but not necessarily the same property. The difference is in how x is interpreted. When using a dot, the part after the dot must be a valid variable name, and it directly names the property. When using square brackets, the expression between the brackets is evaluated to get the property name. Whereas value.x fetches the property of value named “x”, value[x] tries to evaluate the expression x and uses the result as the property name.
   Methods
      Properties that contain functions are generally called methods of the value they belong to. As in, “toUpperCase is a method of a string”.
      array.pop
      array.push
      array.join
   Objects
      Values of the type object are arbitrary collections of properties between {} and elements are devided by "," the elements consists of name and value with ":" in between them.
   Mutability
      object1 == object2 is true only if those are accessing the same value precisely, not if both of them accesses the same amount of value but different instances.
   The lycanthrope’s log
      google it
   Computing correlation
2018-01-25 20:13:05 This one is getting messy for me around:

function hasEvent(event, entry) {
  return entry.events.indexOf(event) != -1;
}


what does the events mean in line:
  return entry.events.indexOf(event) != -1;

Is this a property, a method, a what?
2018-01-25 20:15:35  ah okay, this is just one of the elements of the objet (is this the right term / phrase "element of an object" ?)

2018-01-26 21:35:45
function hasEven(event, entry) {
   return entry.events.indexOf(event) != -1;
}

This function checks if an event has a certain entry, and if it has it, it will return it's position among the events.
the entry.events is the reference made up by the entry object and its events element. The events element is an array of event items. so entry.events.[0] is the first of the array items of the elements within the entry object.

Let's see the other one...

function tableFor(event, journal) {
   var table = [0, 0, 0, 0];
   for (var i = 0; i < jooournal.length; i++) {
      var entry = journal[i], index = 0;
      if (hasEvent(event, entry)) index +=1;
      if (entry.squirrel) index += 2;
      table[index] += 1;
   }
   return table;
}


so the same with comments:

function tableFor(event, journal) { //this is a function which is taking two variables, event and journal
  var table = [0, 0, 0, 0]; //we are defining a table array (which we are going to return at the end.
// this table is special
// the first position is going to hold the number of entries where we have not seen the event and we have not seen turning into a squirrel
// the second position is going to hold the number of entries where we have seen the event, but we have not seen turning into a squirrel
// the third position is going to hold the number of entries where we have not seen the eevent, but we have seen turning into a squirrel
// and finally the last one is going to hold the number of entries where we have seen both the event and turing into a squirrel.
  for (var i = 0; i < journal.length; i++) { //this is a for loop assisting going through the entire journal. If the entry does not have the event nor the squirrel, it will leave the position at 0, and we are going to increase the value of the table array which is in the postion 0 (the first position).
    var entry = journal[i], index = 0; //in every cycle we are going to use a new (new for the cycle) entry variable to point to the "i"-th entry of the journal. Oh and we set up the index variable with value 0. This is going to help us decide the  position of the value within the table array to increase 
    if (hasEvent(event, entry)) index += 1; //if this entry has the event, then we want to increment the value in the position 1 or 3 (second  or fourth), it depends on the next "if" condition 
    if (entry.squirrel) index += 2; //if this entry says we turned into a squirrel that day, then we want to increase the value in position 2 or 3 (third or fourth). it depends on the previous  "if" condition. 
    table[index] += 1;//Now, if we did not have the event nor the squirrel, we are increasing the number at postion 0, if we had the event, but not the squirrel, then at position 1, if we had the squirrel but not the event, then position 2, and if we had both the event and the squirrel, then position 3.
  }// This is going to be executed for all journal entries.
  return table; // once we finished, we return the table.
}


   Objects as maps

var map = {};
function storePhi(event, phi) {
   map[event] = phi;
}

and one more time with comments

var map = {}; //we are defining an object which we are going to call "map". This object is empty at this point.
function storePhi(event, phi) { //we are defining a cunftion called "storePhi" where we take two values: an event and it's correlation to squirrels (phi)
  map[event] = phi; //I had to stare at this for a long time, but I believe this is simply creating a new item in the object. Tha name of the item will be the name passed by the "event" variable, and the value of the item is going to be the value passed by the "phi" variable.
} // aaaaand that's it.

I think I can even test this in the console... so why not?

==>

var map = {};
undefined
function storePhi(event, phi) {
    map[event] = phi;
}
undefined
map
{}__proto__: Object
storePhi("pizza", 0.069);
undefined
map
{pizza: 0.069}pizza: 0.069__proto__: Object
storePhi("touched tree", -0.081);
undefined
map
{pizza: 0.069, touched tree: -0.081}pizza: 0.069touched tree: -0.081__proto__: Object
console.log("pizza" in map);
VM487:1 true
undefined
console.log(map["touched tree"]);
VM529:1 -0.081
undefined

<==

This looks cool :))))


I think I do not understand the real message here:
"A map is a way to go from values in one domain (in this case, event names) to corresponding values in another domain (in this case, ϕ coefficients)."

"JavaScript provides a loop construct specifically for going over the properties of an object. It looks a little like a normal for loop but distinguishes itself by the use of the word in."

==>
for (var event in map)
    console.log("The correlation for '" + event + "' is " + map[event]);
VM607:2 The correlation for 'pizza' is 0.069
VM607:2 The correlation for 'touched tree' is -0.081
undefined
<==

Pure awesomeness :)))

   The final analysis

function gatherCorrelations(journal) {
   var phis = {};
   for (var entry = 0; entry < journal.length; entry++) {
      var events = journal[entry].events;
      for (var i = 0; i < events.length; i++) {
         var event = events[i];
         if (!(event in phis))
            phis[event] = phi(tableFor(event, journal));
      }
   }
   return phis;
}




and one more time with comments:


function gatherCorrelations(journal) { // defining a function called gatherCorrelations. this funcrion takes a value under the journal name (I believe it specifically works with objects that have "evets" properties, which are objects, and squirrel properties which are boolean
  var phis = {}; //defining the phis object (empty) which we are going to return at the end.
  for (var entry = 0; entry < journal.length; entry++) { //looping through each and every entry of the journal object
    var events = journal[entry].events; // creating the local variable events and giving it the "entry"-th entry of the journal object
    for (var i = 0; i < events.length; i++) { // since it is an array we creat a loop to go over each array element in this entry
      var event = events[i]; // and we create a local "event" variable and ask it to hold the i-th item of  the events array
      if (!(event in phis)) // it this event is not yet in the phis object, then we proceed with:
        phis[event] = phi(tableFor(event, journal)); // creating a new entry in the phis object. We are going to call it by the name passed through the event variable and give the value which is returned (calculated) by the function defined earlier (so it will be a four items long array) 
    }//and that is it about the certain event within the journal entry. Once we looped through all events in the entry, we move on
  }// and that is it about the certain entry within the journal. Once we looped through all the entries within the journal object, we move on.
  return phis; //we return the entire phis object, which now has all the events with their table of numbers representing their correlation to squirrels. Beautiful ...
}

I gotta stop now, but I think it made more sense now, that I have a fixed goal with a timeline and real rewards / consequencies attached to it. (This is not the first time I try to read this book)

So long for today.

2018-01-26 22:33:08
